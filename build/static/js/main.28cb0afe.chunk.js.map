{"version":3,"sources":["styles/globals.ts","assets/entradas.svg","assets/saidas.svg","assets/total.svg","components/Summary/styles.ts","services/api.ts","hooks/useTransactions.tsx","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashbord/styles.ts","components/Dashbord/index.jsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","assets/vector.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","Container","styled","div","api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransaction","useContext","Summary","summary","reduce","acc","type","deposits","amount","total","withdraws","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","map","title","category","DateTimeFormat","id","main","Dashbord","header","Content","Header","onOpenNewTransactionNewModal","logoImg","onClick","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28cb0afe.chunk.js","sourcesContent":["import {createGlobalStyle} from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n\n:root {\n    --background : #f0f2f5;\n    --red : #E52E4D;\n    --blue : #5429CC;\n    --green : #33CC95;\n\n    --blue-light :#6933FF;\n    \n    --text-title: #363F5F;\n    --text-body : #969CB2;\n\n    --shape: #FFFFFF;\n}\n\n\n*{\n    margin : 0 ;\n    padding : 0 ;\n    box-sizing: border-box ;\n}\n\nhtml {\n    @media (max-width : 1080px) {\n        font-size : 93.75;                  // 15px  configuring the size of font accordingly the size screen of device   \n    }\n\n    @media (max-width : 720px){\n        font-size : 87.5%;                  // 14px\n    }\n                                            // REM = 1rem = font size   \n}\n\n\nbody {\n    background :  var(--background);\n    -webkit-font-smoothing : antialiased; \n}\n\n\nbody, input, textarea, button {             // these areas have his own font, so is necessary configure \n    font-family: 'Poppings',sans-serif;\n    font-weight: 400 ;                      // we need back to 400\n}\n\n\nh1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n}\n\n\nbutton {\n    cursor : pointer ;\n}\n\n\n[disabled] {\n    opacity: 0.6;\n    cursor : not-allowed;\n}\n\n\n.react-modal-overlay {\n    background : rgba(0, 0, 0, 0.5);\n    position : fixed ; \n    top : 0 ;\n    bottom : 0 ;\n    right : 0 ;\n    left : 0;\n    display : flex ;\n    align-items : center ;\n    justify-content : center ;\n\n}\n.react-modal-content {\n    width : 100% ;\n    max-width: 576px;\n    background : var(--background);\n    padding : 3rem ;\n    position : relative;  // to position items\n    border-radius : 0.24rem;\n} \n\n\n.react-modal-close {\n    position : absolute ;\n    right : 1.5rem;\n    top : 1.5rem ;\n    border: 0 ;\n    background :transparent ;\n\n    transition : filter 0.2s ;\n\n    &:hover {\n        filter : brightness(0.8);\n    }\n}\n\n`","export default __webpack_public_path__ + \"static/media/entradas.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/saidas.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.efc003fe.svg\";","import  styled from 'styled-components' ;\n\nexport const Container = styled.div `\n\ndisplay : grid ;\ngrid-template-columns : repeat(3 , 1fr); // = 1fr 1fr 1fr\ngap : 2rem;\nmargin-top : -10rem;\n\n\ndiv{\n    background : var(--shape);\n    padding : 1.5rem 2rem ;\n    border-radius : 0.25rem;\n    color : var(--text-title)\n}\n\n\nheader {\n    display:flex ;\n    align-items : center ;\n    justify-content : space-between;\n}\n\n\nstrong {\n    display : block ;  // margin inline don't have top \n    margin-top : 1rem ;\n    font-size : 2rem ;\n    font-weight : 500 ;\n}\n\n.highlight-background {\n    background : var(--green);\n    color : #FFF;\n}\n\n\n`","import axios from 'axios';\n\nexport const api = axios.create({\n    baseURL : 'https://localhost:3000/api', // fixed address  \n\n})","import { createContext , useState , useEffect , ReactNode, useContext} from 'react';\nimport { api } from '../services/api'\n\n\ninterface Transaction {\n    id : number \n    title : string \n    amount : number\n    type : string \n    category : string\n    createdAt : string\n}\n\n\ninterface TransactionsProviderProps {\n    children : ReactNode ;// reactNode all content react   // is necessary to explicit that our component context will share data to others components\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>; // creating a type for input / copying the props os Transaction and omit id and createdAt\n\n\ninterface TransactionsContextData {   //what data will share with others components for props\n    transactions : Transaction[];\n    createTransaction : (transaction : TransactionInput ) => Promise<void>; // expliciting that is a async function \n}\n\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n    {} as TransactionsContextData  // forcing a typing with as // because here the value it's a empty array \n    );  // creating a context and put what kind of value we'll use.\n\n    \nexport function TransactionsProvider ( {children} : TransactionsProviderProps ){\n\n    const [transactions , setTransactions] = useState<Transaction[]>([]);\n\n    useEffect(() => {\n        api.get('transactions')  // dont need convert to json \n        .then( response => setTransactions(response.data.transactions))\n\n    },[] ); //execute 1 time \n\n    async function  createTransaction(transactionInput : TransactionInput){\n  \n     const response =  await api.post('/transactions' , { // putting new transaction in mirage database  \n         ...transactionInput,  // get the new transaction response from database insertion\n         createdAt : new Date()\n     }); //sending data to route transactions created with miragejs in index \n     const {transaction} = response.data ;\n\n     setTransactions([\n         ...transactions,\n            transaction,\n     ])\n    }\n                                                                //seending data to \n    return (\n        <TransactionsContext.Provider value={{transactions , createTransaction ,}}>\n            {children}\n        </TransactionsContext.Provider>\n    )\n}\n\n//TransactionsContext.Provider\n\n\nexport function useTransaction(){\n    const context = useContext(TransactionsContext)\n    return context ;  // using our own hook\n}","import incomeImg from '../../assets/entradas.svg';\nimport outcomeImg from '../../assets/saidas.svg';\nimport totalImg from '../../assets/total.svg'\nimport {Container} from './styles' ;\n\n\nimport { useTransaction } from '../../hooks/useTransactions';\n\nexport function Summary(){\n\n    const {transactions} = useTransaction();\n    \n    /*const totalDeposits = transactions.reduce((acc , transaction) => {\n        if(transaction.type === 'deposit') {\n            return acc + transaction.amount;\n        }\n\n        return acc ;\n    }, 0);*/\n\n    const summary = transactions.reduce((acc , transaction) => { // go throught an array for each transaction and calculate the values \n\n        if(transaction.type === 'deposit'){\n            acc.deposits += transaction.amount; \n            acc.total += transaction.amount;\n        } else {\n\n            acc.withdraws += transaction.amount;\n            acc.total -= transaction.amount\n        }\n\n        return acc ; // in reduce is necessary return one acumulator\n\n    }, {\n        deposits : 0,\n        withdraws : 0 ,\n        total : 0 \n    })\n    \n    return (\n       \n        <Container>\n            <div>\n                <header>\n                    <p>Entradas</p>\n                    <img src={incomeImg} alt=\"income\" />\n                </header>\n\n                <strong>\n                    {new Intl.NumberFormat('pt-BR' ,{\n                    style : 'currency',\n                    currency : 'BRL'\n                   }).format(summary.deposits)}\n               </strong>\n            </div>\n\n            <div>\n                <header>\n                    <p>Saidas</p>\n                    <img src={outcomeImg} alt=\"outcome\" />\n                </header>\n                \n                <strong>\n                    - {new Intl.NumberFormat('pt-BR' ,{\n                    style : 'currency',\n                    currency : 'BRL'\n                    }).format(summary.withdraws)}\n                </strong>\n            </div>\n\n            <div className=\"highlight-background\">\n                <header>\n                    <p>Total</p>\n                    <img src={totalImg} alt=\"total\" />\n                </header>\n\n                <strong>\n                    {new Intl.NumberFormat('pt-BR' ,{\n                    style : 'currency',\n                    currency : 'BRL'\n                    }).format(summary.total)}\n                </strong>\n\n            </div>\n        </Container>\n\n\n    )\n}","import styled from 'styled-components';\n\nexport const Container = styled.div `\n\n    margin-top : 4rem;\n\n\n    table  {\n        width : 100%;\n        border-spacing : 0 0.5rem;\n\n        th {\n            color : var(--text-body);\n            font-weight:400px;\n            padding : 1rem 2rem ;\n            text-align : left;\n            line-height :1.5rem;\n        }\n\n        td {\n            padding : 1rem 2rem ;\n            border : 0;\n            background: var(--shape);\n            color : var(--text-body);\n            border-radius: 0.25rem ;\n\n            &:first-child {\n                color: var(--text-title)\n            }\n\n            &.deposit {\n                color : var(--green)\n\n            }\n            &.withdraw {\n                color : var(--red)\n            }\n        }\n    }\n\n`","\nimport { useTransaction } from '../../hooks/useTransactions';\nimport { Container } from \"./styles\";\n\n\n\nexport function TransactionsTable() {\n\n    const {transactions} = useTransaction();\n    return(\n    <Container>\n        <table>\n            <thead>\n                <th>Titulo</th>\n                <th>Valor</th>\n                <th>Categoria</th>\n                <th>Data</th>\n            </thead>\n\n            <tbody>\n            \n            \n                {transactions.map(transaction => {\n                    return (               \n                        <tr key={transaction.id}>\n                            <td>{transaction.title}</td>\n\n                                <td className={transaction.type}>{new Intl.NumberFormat('pt-BR' ,{\n                                    style : 'currency',\n                                    currency : 'BRL'\n                                } ).format(transaction.amount)}</td>\n\n                            <td>{transaction.category}</td>\n\n                            <td>{new Intl.DateTimeFormat('pt-BR' ).format(\n                                 new Date (transaction.createdAt)\n                                 )}</td>\n                        </tr>\n                )})}\n            </tbody>\n        </table>       \n    </Container>\n    );\n}","import styled from 'styled-components' ;\n\n\nexport const Container = styled.main `\n    max-width : 1120px; \n    margin : 0 auto ;\n    padding : 2.5rem 1rem ;\n\n\n`","import { Summary } from '../Summary';\nimport {TransactionsTable} from '../TransactionsTable';\n\nimport {Container} from './styles';\n\nexport function Dashbord(){\n    return (\n  <Container>\n      <Summary/>\n      <TransactionsTable/>\n  </Container>\n  \n  )\n\n}","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components';\n\n\nexport const Container = styled.header`/*type tag of*/\n\nbackground : var(--blue);\n\n`;\n\nexport const Content = styled.div `\n\n    max-width : 1120px;\n    margin : 0 auto ;\n    padding : 2rem 1rem 12rem ; //1 rem = 16px \n    display: flex ;\n    align-items : center ;\n    justify-content : space-between;\n\n\n    button {\n        font-size : 1rem ;\n        color: #fff;\n        background : var(--blue-light);\n        border : 0;\n        padding : 0 2rem ;\n        border-radius : 0.25rem ;\n        height : 3rem ;\n\n        transition : filter 0.2s; \n\n        &:hover {\n            filter: brightness(0.9)\n        }\n        \n    }\n\n`","import  logoImg  from '../../assets/logo.svg'\nimport { Container , Content } from './styles'\n\ninterface HeaderProps {\n    onOpenNewTransactionNewModal : () => void ; //without params and return \n}\n\n\nexport function Header ({ onOpenNewTransactionNewModal } : HeaderProps){\n    \n    return (\n    \n    <Container>\n        <Content>\n            <img src={logoImg} alt=\"dt money\" />\n            <button onClick={onOpenNewTransactionNewModal}> {/* alter data from app(Dad Component) */}\n                Nova transação\n            </button>         \n        </Content>\n    </Container>\n    \n    )\n}","export default __webpack_public_path__ + \"static/media/vector.f62862c6.svg\";","import styled from 'styled-components';\nimport { darken , transparentize } from 'polished'; // library with color functions\n\nexport const Container = styled.form `\n\n    :root {\n        --input-background : #e7e9ee; \n    }\n\n    h2{\n        color : var(--text-title);\n        font-size : 1.5rem ;\n        margin-bottom : 2rem;\n    }\n\n    input {\n        width : 100%;\n        ;   border-radius : 0.25rem;\n        background : var(----input-background);\n        border : 1px solid #d7d7d7;\n        font-weight : 400 ; \n        font-size : 1rem ;\n\n        &::placeholder {\n           color : var (--text-body); \n        }\n\n        & + input {\n            ;\n            margin-top : 1rem ; // start by second input \n\n        }\n    }\n\n    button[type=\"submit\"] {\n        width : 100%;\n        padding : 0 1.5rem;\n        height : 4rem;\n        background : var(--green);\n        color : #fff;\n        border-radius: 0.25rem ;\n        border : 0;\n        font-size : 1rem ;\n        margin-top : 1.5rem;\n\n        transition : filter 0.2s;\n\n        &:hover {\n            filter: brightness(0.9);\n        }\n    }  \n`;\n\n\nexport const TransactionTypeContainer = styled.div `\n\n    margin : 1rem 0;\n    display : grid ;\n    grid-template-columns : 1fr 1fr ;\n    gap : 0.5rem;\n\n`\n\ninterface RadioBoxProps {\n    isActive : boolean ;\n    activeColor: 'green' | 'red'\n}\n\n\nconst colors = {\n    green : '#33CC95',\n    red : '#E52E4D'\n}\nexport const RadioBox = styled.button<RadioBoxProps> `\n\n        height : 4rem ;\n        border : 1px solid #d7d7d7 ;\n        border-radius: 0.25rem;\n\n        background : ${(props) => props.isActive \n        ? transparentize(0.9 , colors[props.activeColor])\n        : 'transparent'};\n        \n        display : flex ;\n        align-items : center ;\n        justify-content : center;\n\n        transition : border-color 0.2s;\n\n        &:hover {\n            border-color : ${darken(0.1 , '#d7d7d7')};\n        }\n\n\n        img {\n            width : 20px ;\n            height : 20px ;\n        }\n\n        span {\n\n            display : inline-block ;\n            margin-left : 1rem ;\n            font-size : 1rem ;\n            color : var(--text-title)\n        }\n\n\n`\n\n","import Modal from 'react-modal';\nimport { useState  , FormEvent } from 'react';\nimport { useTransaction } from '../../hooks/useTransactions';\n\nimport closeImg from '../../assets/vector.svg'\nimport incomeImg from '../../assets/entradas.svg';\nimport outcomeImg from '../../assets/saidas.svg';\n\nimport { Container , TransactionTypeContainer , RadioBox} from './styles';\n\ninterface NewTransactionProps  {\n  isOpen : boolean ;\n  onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({ isOpen , onRequestClose } : NewTransactionProps ){\n  \n  const { createTransaction } = useTransaction()\n\n  const [title , setTitle] = useState('');\n  const [ amount, setAmount] = useState(0);\n  const [category , setCategory] = useState('');\n  const [type,setType] = useState('deposit');\n  \n async function handleCreateNewTransaction (event : FormEvent){\n    event.preventDefault();\n\n\n     await createTransaction({\n      title ,\n      amount ,\n      type , \n      category ,\n    })\n\n    setTitle('');\n    setAmount(0);  //cleaning modal\n    setCategory('');\n    setType('deposit');\n    onRequestClose();\n  }\n    return (\n     \n        <Modal isOpen={isOpen}\n               onRequestClose={onRequestClose}\n               overlayClassName=\"react-modal-overlay\"\n               className=\"react-modal-content\"\n               >  \n\n         <button type=\"button\" \n         onClick={onRequestClose}\n         className=\"react-modal-close\">\n           <img src={closeImg} alt=\"close modal\" />\n        </button> \n\n        <Container onSubmit={handleCreateNewTransaction}>    \n              <h2>Cadastrar transação</h2>\n\n              <input type=\"text\"\n               placeholder=\"Título\" \n               value={title}                                        // event.target gets the value typed \n               onChange = { event =>setTitle(event.target.value)}  //onChange runs a action when value changes \n               />                                                  \n\n              <input \n              type=\"number\"\n               placeholder=\"Valor\" \n               value ={amount}\n               onChange = { event =>setAmount(Number(event.target.value))}\n               />\n\n              <TransactionTypeContainer>\n                <RadioBox\n                type='button'\n                onClick={()=> {setType('deposit')}}\n                isActive={type === 'deposit'}\n                activeColor='green'\n                >\n                  <img src={incomeImg} alt=\"income\" />\n                  <span>Entrada</span>\n                </RadioBox>\n\n\n                <RadioBox\n                type='button'\n                onClick={()=>{setType('withdraw')}}\n                isActive={type === 'withdraw'}\n                activeColor='red'\n                >\n                  <img src={outcomeImg} alt=\"outcome\" />\n                  <span>Saida</span>\n                  \n                </RadioBox>\n              </TransactionTypeContainer>\n             \n\n              <input type=\"text\"\n               placeholder=\"Categotia\" \n               value={category}\n               onChange = { event =>setCategory(event.target.value)} // we get the value typed here\n               />\n\n              <button \n              type=\"submit\"\n              >Cadastrar</button>\n\n        </Container>\n        </Modal>\n    \n    )\n}","import { useState } from 'react';\nimport Modal from 'react-modal';\nimport {GlobalStyle} from './styles/globals';\n\nimport { Dashbord } from './components/Dashbord';\nimport { Header } from './components/Header';\nimport { NewTransactionModal } from './components/NewTransactionModal';\nimport { TransactionsProvider } from './hooks/useTransactions';\n\n\nModal.setAppElement('#root'); //put modal in tag root\n\nexport function App() {\n\n  const [isNewTransactionModalOpen , setIsNewTransactionModalOpen ] = useState(false);\n    \n  function handleOpenNewTransactionModal(){ // handle = click\n      setIsNewTransactionModalOpen(true)\n  }\n  function handleCloseNewTransactionModal(){ // handle = click\n      setIsNewTransactionModalOpen(false)\n  }\n  \n\n\n  return (\n    <TransactionsProvider>\n     <Header onOpenNewTransactionNewModal={handleOpenNewTransactionModal} />\n     <Dashbord/>\n     <NewTransactionModal\n       isOpen={isNewTransactionModalOpen}\n       onRequestClose={handleCloseNewTransactionModal}\n     />\n     <GlobalStyle/>\n    </TransactionsProvider>\n  );\n}\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport { createServer , Model } from 'miragejs'; \n\ncreateServer({\n\n  models: {\n    transaction : Model,\n  },\n\n  seeds(server){\n    server.db.loadData ({\n      transactions : [\n      \n    ]\n    })\n  },\n\n  routes(){\n\n  this.namespace = 'api'; // configuring router of mirage\n\n  this.get('/transactions' , () => { //routes\n    return this.schema.all('transaction') ; // return all transactions inside\n   })\n\n   this.post('/transactions', (schema , request) => {  //get data from form\n     const data = JSON.parse(request.requestBody) // data comes as text, so convert it.\n     return schema.create('transaction' , data )  // schema is our database\n   })\n\n  }\n\n})\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}