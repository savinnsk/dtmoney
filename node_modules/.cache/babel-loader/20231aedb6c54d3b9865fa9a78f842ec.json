{"ast":null,"code":"var _jsxFileName = \"/home/savinnsk/Savinnsk/Ignite_ReactJs/reactjs/dt_money/src/hooks/useTransactions.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useContext } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionsContext = /*#__PURE__*/createContext({});\nexport function TransactionsProvider({\n  children\n}) {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get('transactions') // dont need convert to json \n    .then(response => setTransactions(response.data.transactions));\n  }, []); //execute 1 time \n\n  async function createTransaction(transactionInput) {\n    const response = await api.post('/transactions', { ...transactionInput,\n      createdAt: new Date()\n    }); //sending data to route transactions created with miragejs in index \n\n    const {\n      transaction\n    } = response.data;\n    setTransactions([...transactions, transaction]);\n  } //seending data to \n\n\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      transactions,\n      createTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n} //TransactionsContext.Provider\n\n_s(TransactionsProvider, \"ASRwL10q/N/7LAX2c/hDHGN/eIs=\");\n\n_c = TransactionsProvider;\nexport function useTransaction() {\n  _s2();\n\n  const context = useContext(TransactionsContext);\n  return context;\n}\n\n_s2(useTransaction, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["/home/savinnsk/Savinnsk/Ignite_ReactJs/reactjs/dt_money/src/hooks/useTransactions.tsx"],"names":["createContext","useState","useEffect","useContext","api","TransactionsContext","TransactionsProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transactionInput","post","createdAt","Date","transaction","useTransaction","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAyBC,QAAzB,EAAoCC,SAApC,EAA2DC,UAA3D,QAA4E,OAA5E;AACA,SAASC,GAAT,QAAoB,iBAApB;;AA0BA,MAAMC,mBAAmB,gBAAGL,aAAa,CACrC,EADqC,CAAzC;AAKA,OAAO,SAASM,oBAAT,CAAgC;AAACC,EAAAA;AAAD,CAAhC,EAAwE;AAAA;;AAE3E,QAAM,CAACC,YAAD,EAAgBC,eAAhB,IAAmCR,QAAQ,CAAgB,EAAhB,CAAjD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,GAAG,CAACM,GAAJ,CAAQ,cAAR,EAAyB;AAAzB,KACCC,IADD,CACOC,QAAQ,IAAIH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CADlC;AAGH,GAJQ,EAIP,EAJO,CAAT,CAJ2E,CAQnE;;AAER,iBAAgBM,iBAAhB,CAAkCC,gBAAlC,EAAsE;AAErE,UAAMH,QAAQ,GAAI,MAAMR,GAAG,CAACY,IAAJ,CAAS,eAAT,EAA2B,EAC/C,GAAGD,gBAD4C;AAE/CE,MAAAA,SAAS,EAAG,IAAIC,IAAJ;AAFmC,KAA3B,CAAxB,CAFqE,CAKjE;;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAgBP,QAAQ,CAACC,IAA/B;AAEAJ,IAAAA,eAAe,CAAC,CACZ,GAAGD,YADS,EAETW,WAFS,CAAD,CAAf;AAIA,GAtB0E,CAuBf;;;AAC5D,sBACI,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAACX,MAAAA,YAAD;AAAgBM,MAAAA;AAAhB,KAArC;AAAA,cACKP;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,C,CAED;;GA/BgBD,oB;;KAAAA,oB;AAkChB,OAAO,SAASc,cAAT,GAAyB;AAAA;;AAC5B,QAAMC,OAAO,GAAGlB,UAAU,CAACE,mBAAD,CAA1B;AACA,SAAOgB,OAAP;AACH;;IAHeD,c","sourcesContent":["import { createContext , useState , useEffect , ReactNode, useContext} from 'react';\nimport { api } from '../services/api'\n\n\ninterface Transaction {\n    id : number \n    title : string \n    amount : number\n    type : string \n    category : string\n    createdAt : string\n}\n\n\ninterface TransactionsProviderProps {\n    children : ReactNode ;\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\n\n\ninterface TransactionsContextData {\n    transactions : Transaction[];\n    createTransaction : (transaction : TransactionInput ) => Promise<void>;\n}\n\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n    {} as TransactionsContextData\n    );\n\n    \nexport function TransactionsProvider ( {children} : TransactionsProviderProps ){\n\n    const [transactions , setTransactions] = useState<Transaction[]>([]);\n\n    useEffect(() => {\n        api.get('transactions')  // dont need convert to json \n        .then( response => setTransactions(response.data.transactions))\n\n    },[] ); //execute 1 time \n\n    async function  createTransaction(transactionInput : TransactionInput){\n  \n     const response =  await api.post('/transactions' , {\n         ...transactionInput,\n         createdAt : new Date()\n     }); //sending data to route transactions created with miragejs in index \n     const {transaction} = response.data ;\n\n     setTransactions([\n         ...transactions,\n            transaction,\n     ])\n    }\n                                                                //seending data to \n    return (\n        <TransactionsContext.Provider value={{transactions , createTransaction ,}}>\n            {children}\n        </TransactionsContext.Provider>\n    )\n}\n\n//TransactionsContext.Provider\n\n\nexport function useTransaction(){\n    const context = useContext(TransactionsContext)\n    return context ;\n}"]},"metadata":{},"sourceType":"module"}