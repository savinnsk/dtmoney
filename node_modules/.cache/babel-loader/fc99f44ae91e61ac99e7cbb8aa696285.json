{"ast":null,"code":"import _regeneratorRuntime from\"/home/savinnsk/Savinnsk/Study/Ignite_ReactJs/reactjs/dt_money/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/home/savinnsk/Savinnsk/Study/Ignite_ReactJs/reactjs/dt_money/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/savinnsk/Savinnsk/Study/Ignite_ReactJs/reactjs/dt_money/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/home/savinnsk/Savinnsk/Study/Ignite_ReactJs/reactjs/dt_money/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/savinnsk/Savinnsk/Study/Ignite_ReactJs/reactjs/dt_money/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{createContext,useState,useEffect,useContext}from'react';import{api}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";var TransactionsContext=/*#__PURE__*/createContext({}// forcing a typing with as // because here the value it's a empty array \n);// creating a context and put what kind of value we'll use.\nexport function TransactionsProvider(_ref){var children=_ref.children;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),transactions=_useState2[0],setTransactions=_useState2[1];useEffect(function(){api.get('transactions')// dont need convert to json \n.then(function(response){return setTransactions(response.data.transactions);});},[]);//execute 1 time \nfunction createTransaction(_x){return _createTransaction.apply(this,arguments);}//seending data to \nfunction _createTransaction(){_createTransaction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(transactionInput){var response,transaction;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return api.post('/transactions',_objectSpread(_objectSpread({},transactionInput),{},{// get the new transaction response from database insertion\ncreatedAt:new Date()}));case 2:response=_context.sent;//sending data to route transactions created with miragejs in index \ntransaction=response.data.transaction;setTransactions([].concat(_toConsumableArray(transactions),[transaction]));case 5:case\"end\":return _context.stop();}}},_callee);}));return _createTransaction.apply(this,arguments);}return/*#__PURE__*/_jsx(TransactionsContext.Provider,{value:{transactions:transactions,createTransaction:createTransaction},children:children});}//TransactionsContext.Provider\nexport function useTransaction(){var context=useContext(TransactionsContext);return context;// using our own hook\n}","map":{"version":3,"sources":["/home/savinnsk/Savinnsk/Study/Ignite_ReactJs/reactjs/dt_money/src/hooks/useTransactions.tsx"],"names":["createContext","useState","useEffect","useContext","api","TransactionsContext","TransactionsProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transactionInput","post","createdAt","Date","transaction","useTransaction","context"],"mappings":"w4BAAA,OAASA,aAAT,CAAyBC,QAAzB,CAAoCC,SAApC,CAA2DC,UAA3D,KAA4E,OAA5E,CACA,OAASC,GAAT,KAAoB,iBAApB,C,2CA0BA,GAAMC,CAAAA,mBAAmB,cAAGL,aAAa,CACrC,EAA+B;AADM,CAAzC,CAEQ;AAGR,MAAO,SAASM,CAAAA,oBAAT,MAAwE,IAAvCC,CAAAA,QAAuC,MAAvCA,QAAuC,CAE3E,cAAyCN,QAAQ,CAAgB,EAAhB,CAAjD,wCAAOO,YAAP,eAAsBC,eAAtB,eAEAP,SAAS,CAAC,UAAM,CACZE,GAAG,CAACM,GAAJ,CAAQ,cAAR,CAAyB;AAAzB,CACCC,IADD,CACO,SAAAC,QAAQ,QAAIH,CAAAA,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CAAnB,EADf,EAGH,CAJQ,CAIP,EAJO,CAAT,CAIQ;AARmE,QAU3DM,CAAAA,iBAV2D,sDAuBf;AAvBe,yGAU3E,iBAAkCC,gBAAlC,iKAEyBX,CAAAA,GAAG,CAACY,IAAJ,CAAS,eAAT,gCACjBD,gBADiB,MACE;AACtBE,SAAS,CAAG,GAAIC,CAAAA,IAAJ,EAFQ,GAFzB,QAEON,QAFP,eAKK;AACGO,WANR,CAMuBP,QAAQ,CAACC,IANhC,CAMQM,WANR,CAQCV,eAAe,8BACRD,YADQ,GAERW,WAFQ,GAAf,CARD,sDAV2E,oDAwB3E,mBACI,KAAC,mBAAD,CAAqB,QAArB,EAA8B,KAAK,CAAE,CAACX,YAAY,CAAZA,YAAD,CAAgBM,iBAAiB,CAAjBA,iBAAhB,CAArC,UACKP,QADL,EADJ,CAKH,CAED;AAGA,MAAO,SAASa,CAAAA,cAAT,EAAyB,CAC5B,GAAMC,CAAAA,OAAO,CAAGlB,UAAU,CAACE,mBAAD,CAA1B,CACA,MAAOgB,CAAAA,OAAP,CAAkB;AACrB","sourcesContent":["import { createContext , useState , useEffect , ReactNode, useContext} from 'react';\nimport { api } from '../services/api'\n\n\ninterface Transaction {\n    id : number \n    title : string \n    amount : number\n    type : string \n    category : string\n    createdAt : string\n}\n\n\ninterface TransactionsProviderProps {\n    children : ReactNode ;// reactNode all content react   // is necessary to explicit that our component context will share data to others components\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>; // creating a type for input / copying the props os Transaction and omit id and createdAt\n\n\ninterface TransactionsContextData {   //what data will share with others components for props\n    transactions : Transaction[];\n    createTransaction : (transaction : TransactionInput ) => Promise<void>; // expliciting that is a async function \n}\n\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n    {} as TransactionsContextData  // forcing a typing with as // because here the value it's a empty array \n    );  // creating a context and put what kind of value we'll use.\n\n    \nexport function TransactionsProvider ( {children} : TransactionsProviderProps ){\n\n    const [transactions , setTransactions] = useState<Transaction[]>([]);\n\n    useEffect(() => {\n        api.get('transactions')  // dont need convert to json \n        .then( response => setTransactions(response.data.transactions))\n\n    },[] ); //execute 1 time \n\n    async function  createTransaction(transactionInput : TransactionInput){\n  \n     const response =  await api.post('/transactions' , { // putting new transaction in mirage database  \n         ...transactionInput,  // get the new transaction response from database insertion\n         createdAt : new Date()\n     }); //sending data to route transactions created with miragejs in index \n     const {transaction} = response.data ;\n\n     setTransactions([\n         ...transactions,\n            transaction,\n     ])\n    }\n                                                                //seending data to \n    return (\n        <TransactionsContext.Provider value={{transactions , createTransaction ,}}>\n            {children}\n        </TransactionsContext.Provider>\n    )\n}\n\n//TransactionsContext.Provider\n\n\nexport function useTransaction(){\n    const context = useContext(TransactionsContext)\n    return context ;  // using our own hook\n}"]},"metadata":{},"sourceType":"module"}